const TelegramBot = require('node-telegram-bot-api')
const kb = require('./keyboard-buttons')
const keyboard = require('./keyboard')
const helper = require('./helper')
const QiwiBillPaymentsAPI = require('@qiwi/bill-payments-node-js-sdk');
const SECRET_KEY = 'eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6ImVmdXJtOC0wMCIsInVzZXJfaWQiOiIzODA2MzgxOTM0MDAiLCJzZWNyZXQiOiJhNTJjNTVjOWUwM2Y5OTU3ZGZiMDE2NTZkZWI5MTc1NzI4NDE5NDk1ODI3ZGM1YWMxMTczNzE3NzI1NmQ4YzYzIn19';
const qiwiApi = new QiwiBillPaymentsAPI(SECRET_KEY);

const { Api, TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
/*
const apiId = 9950159;
const apiHash = "b14f3786098d5dd8e9899797dec42bf2";
const session = new StringSession("1AgAOMTQ5LjE1NC4xNjcuNTABu2kEZYPC1U2z6ga2nbUg7CjeLui+IZNzqZ1Q8eC9shDShfPiN5zTqtvXHD6oxERlcs+YDLPPATNeBJ1MofTTH3HBPqMf54UhIm2XS0o9mCM87egutVRxVjoh76g1snbB7gbtSD2rtGLnO5yOBKGQAl1NM0lb5EFA43K+QSzyVyiSyVkbJWT7VEgMNm2LVTqQdESm+TJtmaMeY/J6w5cqGVmL62Cwpv65/W9+pFw/QuvKxYcrm54Vx0+jvi7Fl29IyOM19bMJkyPzmEahWMcL47u2/XsctB3W1UwBNX4g6AMFIhL/GFF61Gxs2In9wyg4v/EbgR3kkkXXswf9/caryjg="); // You should put your string session here
const clientApi = new TelegramClient(session, apiId, apiHash, {});
*/

const {google} = require('googleapis')
const keys = require('./credentials.json');
const { chat } = require('googleapis/build/src/apis/chat');

const express = require('express')
const app = express()

app.get('/', function (req, res) {
  res.send('Hello World')

})

app.listen(process.env.PORT)

const client = new google.auth.JWT(
    keys.client_email,
    null,
    keys.private_key,
    ['https://www.googleapis.com/auth/spreadsheets']
)

helper.logStart()

const TOKEN = "5205903461:AAEahGqovkU3L53jAl5OA7Z4kEw_P5kRJvs"
const bot = new TelegramBot(TOKEN, {polling:true})
let test = 2
let numberIndex = 0
let summ = 0
let time = 0



bot.on('message', msg => {
    const chatId = helper.getChatId(msg)
   
    client.authorize(function(err,tokens){
        if(err){
            console.log(err)
      
            return
        } else {
          
            status(client)
        
        }
    })
    async function status(cl){
     
        const publicKey = '48e7qUxn9T7RyYE1MVZswX1FRSbE6iyCj2gCRwwF3Dnh5XrasNTx3BGPiMsyXQFNKQhvukniQG8RTVhYm3iPyVXeQ7k1CmVN3LeuRPFHNEVECeqUZRYkspJKKndxy37sZGuDxYiozW4B7MZa1ca5EnJkFpsRUEfLqxScwGE2XphFFkAZm7mXmAgsjdXvP'
    
        const params = {
            publicKey,
            amount:  Number(msg.text),
            comment:chatId,
            paySource:'qw',
        };
        const paramsCard = {
            publicKey,
            amount:  Number(msg.text),
            comment:chatId,
            paySource:'card'
        };
        const link = qiwiApi.createPaymentForm(params);
        const linkCard = qiwiApi.createPaymentForm(paramsCard);

        const gsapi = google.sheets({version:'v4',auth: cl})

        const all = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'A1:A'
        }
        let data = await gsapi.spreadsheets.values.get(all)
        let allID = data.data.values.flat().map(Number)
        numberIndex = allID.indexOf(chatId)
        const allstatus = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'G1:G'
        }
        let dataStatus = await gsapi.spreadsheets.values.get(allstatus)
        let idStatus = dataStatus.data.values.flat()
        
        const updateBalance = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`F${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [[msg.text]]}
        }
        
        const updateCount = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–ß–∏—Å–ª–æ –Ω–∞–∫—Ä—É—Ç–∫–∏']]}
        }
        
          
        const updateCountAvto = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–ß–∏—Å–ª–æ –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤']]}
        }
        const updatePodps = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–ß–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤']]}
        }
        const updatePodpsmed = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–ß–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –º–µ–¥–ª–µ–Ω–Ω–æ']]}
        }
        const updatePodpsDef = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–ü–æ–¥–ø–∏—Å—á–∏–∫–∏']]}
        }
        
        const updateNakr = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–ù–∞–∫—Ä—É—Ç–∫–∞']]}
        }
        const updateNakrTime = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–í—Ä–µ–º—è –Ω–∞–∫—Ä—É—Ç–∫–∏']]}
        }
        const updateNakrAvto = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–î–Ω–µ–π –Ω–∞–∫—Ä—É—Ç–∫–∏']]}
        }
        const updateStatusAvto = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–ê–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã']]}
        }
        const sendTexts = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç']]}
        }
        const updateGlavnya = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–ì–ª–∞–≤–Ω–∞—è']]}
        }
      
        const allNumberPost = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'L1:L'
        }
        let dataPost = await gsapi.spreadsheets.values.get(allNumberPost)
        let allNumberPostID = dataPost.data.values.flat()
      
        let postIndex = allNumberPostID.length

        const allNumberPostAvto = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'S1:S'
        }
        let dataPostAvto = await gsapi.spreadsheets.values.get(allNumberPostAvto)
        let allNumberPostIDAvto = dataPostAvto.data.values.flat()
      
        let postIndexAvto = allNumberPostIDAvto.length
     
        const updateNumber = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`M${postIndex}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [[msg.text]]}
        }
        const updateNumberAvto = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`R${postIndexAvto+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [[msg.text]]}
        }
        let tarifTime = new Date().getTime()+(msg.text*97200)*1000
        let tarifDay = `${new Date(tarifTime).getDate()}`+'.'+`${new Date(tarifTime).getMonth()+1}`+'.'+`${new Date(tarifTime).getFullYear()}`+` `+`${new Date(tarifTime). getHours()}`+`:`+`${new Date(tarifTime).getMinutes()}`+`:`+`${new Date(tarifTime).getSeconds()}`
        const   updateNumberDayAvto = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`S${postIndexAvto+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [[tarifDay]]}
        }
      
        
     
        if(idStatus[numberIndex]==='–û–ø–ª–∞—Ç–∞'&& Number(msg.text)){
            gsapi.spreadsheets.values.update(updateBalance)
                  //--
                  const saveIds = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:'V1:V'
                }
                let dataIds = await gsapi.spreadsheets.values.get(saveIds)
                let idTarifs = Number(dataIds.data.values[0].flat())
                const sendTextss = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:`V1`,
                    valueInputOption:'USER_ENTERED',
                    resource: {values: [[Number(idTarifs)+1]]}
                }
                gsapi.spreadsheets.values.update(sendTextss)
                //--
            bot.sendMessage('@newstlgr',`üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ id${msg.chat.id} –Ω–∞ ${msg.text}`)
            bot.sendMessage(chatId,`–í—ã –ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ —Å—á–µ—Ç –Ω–∞ —Å—É–º–º—É ${Number(msg.text)} —Ä—É–±.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n\nüí¨<i>–ï—Å–ª–∏ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ @Zheka920</i>`,{
                reply_markup:{
                    inline_keyboard:  [
                        [    {
                                text:'ü•ù QIWI',
                                callback_data:'qiwi',
                                url:link
                            }
                        ],
                        [
                            { 
                                text:'üí≥ VISA/MASTERCARD',
                                callback_data:'no',
                                url:linkCard
                            }
                 
                        ]]
                },
                parse_mode:'HTML'
            })
        } 

        let postTime = new Date().getTime()
        
        let normalTime= `${new Date(postTime).getDate()}`+'.'+`${new Date(postTime).getMonth()+1}`+'.'+`${new Date(postTime).getFullYear()}`+` `+`${new Date(postTime). getHours()}`+`:`+`${new Date(postTime).getMinutes()}`+`:`+`${new Date(postTime).getSeconds()}`
  
        if(msg.forward_from_chat && idStatus[numberIndex]==='–ù–∞–∫—Ä—É—Ç–∫–∞' && msg.media_group_id === undefined){
            let idChannel = String(msg.forward_from_chat.id).substring(4)
          
            const appendOptions = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'I1',
                valueInputOption:'USER_ENTERED',
                includeValuesInResponse: true,
                resource: {values: [
                    [msg.forward_from_chat.title,msg.chat.id,idChannel, msg.forward_from_message_id,0,normalTime],
                ]}
            }
//---
            const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            await gsapi.spreadsheets.values.update(sendTextss)

//-----     
        
            await bot.forwardMessage('@newstlgr',chatId, msg.message_id).then(function(){}) 

            const saveIdss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIdss = await gsapi.spreadsheets.values.get(saveIdss)
            let idTarifss = Number(dataIdss.data.values[0].flat())
            await bot.sendMessage('@newstlgr', `üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã`)
            await bot.sendMessage('@newstlgr', `https://t.me/newstlgr/${idTarifss}`)

            const sendTextsss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifss)+2]]}
            }
            await gsapi.spreadsheets.values.update(sendTextsss)

            gsapi.spreadsheets.values.append(appendOptions)
            gsapi.spreadsheets.values.update(updateCount)

            bot.sendMessage(chatId,`üëÅ‚Äçüó® –í–≤–µ–¥–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n\nüíØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –æ–¥–∏–Ω –ø–æ—Å—Ç <b>10 000</b>\n\nüí¨ <i>–ü—Ä–∏–º–µ—Ä: –Ω–∞ –ø–æ—Å—Ç–µ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –±—ã–ª–æ 3000. –¢–æ–≥–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 2000.</i>`,{parse_mode: 'HTML' })
        
        } else 
        if(msg.forward_from_chat && idStatus[numberIndex]==='–ù–∞–∫—Ä—É—Ç–∫–∞' && msg.media_group_id !== undefined){
            bot.sendMessage(chatId,`‚ö†Ô∏è –ï—Å–ª–∏ –≤ –ø–æ—Å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (–∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏–ª–∏ –≤–∏–¥–µ–æ), –≤ –±–æ—Ç–∞ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä–≤—É—é –∏–∑ –Ω–∏—Ö (–ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–π —Ç–∞–ø –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–∞–π–ª—É –∏ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å)`,{parse_mode: 'HTML' })
        }

        if(idStatus[numberIndex]==='–ß–∏—Å–ª–æ –Ω–∞–∫—Ä—É—Ç–∫–∏'&& Number(msg.text)<=10000){
//---
            const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            await gsapi.spreadsheets.values.update(sendTextss)
//--

            gsapi.spreadsheets.values.update(updateNumber)
            gsapi.spreadsheets.values.update(updateNakrTime)
            await bot.sendMessage(chatId,`‚è± –ù–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ä–∞—Å—Ç—è–Ω—É—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ 1 –ø–æ—Å—Ç?\n\nüëâ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∏–ª–∏ 0, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å:`)
            await bot.sendMessage('@newstlgr', `${msg.text}`)
        }
        if(idStatus[numberIndex]==='–ß–∏—Å–ª–æ –Ω–∞–∫—Ä—É—Ç–∫–∏'&& Number(msg.text)>10000){
            bot.sendMessage(chatId,`‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 10 000`)
        }
        if(idStatus[numberIndex]==='–í—Ä–µ–º—è –Ω–∞–∫—Ä—É—Ç–∫–∏'&& (Number(msg.text)||msg.text==='0')){
//---
            const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            await gsapi.spreadsheets.values.update(sendTextss)
//--

            gsapi.spreadsheets.values.update(updateNakr)
            await bot.sendMessage(chatId,`‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã`)
            await bot.sendMessage('@newstlgr', `${msg.text}`)
        }

        if(idStatus[numberIndex]==='–ü–æ–¥–ø–∏—Å—á–∏–∫–∏'&& (msg.text.includes('https')||msg.text.includes('t.me')||msg.text.includes('http')||msg.text.includes('@'))){
            const allBalance = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'B1:B'
            }
            let dataBalance = await gsapi.spreadsheets.values.get(allBalance)
            let idBlnc = dataBalance.data.values.flat().map(Number)

            const appendOptions = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'I1',
                valueInputOption:'USER_ENTERED',
                includeValuesInResponse: true,
                resource: {values: [
                    ['–ü–æ–¥–ø–∏—Å—á–∏–∫–∏',msg.chat.id,msg.text, '-',0,normalTime],
                ]}
            }
            //---
            const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            gsapi.spreadsheets.values.update(sendTextss)
//--
            bot.sendMessage('@newstlgr', `–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ —Å—é–¥–∞ –ë–´–°–¢–†–´–ï ${msg.text}`)
           
            gsapi.spreadsheets.values.append(appendOptions)
            gsapi.spreadsheets.values.update(updatePodps)

            bot.sendMessage(chatId,`üë• –í–≤–µ–¥–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n\n –ë–∞–ª–∞–Ω—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∫—Ä—É—Ç–∏—Ç—å <b>${Math.floor(idBlnc[numberIndex]/0.5)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>`,{parse_mode: 'HTML' })
            
        }
        const allBalance = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'B1:B'
        }
        let dataBalance = await gsapi.spreadsheets.values.get(allBalance)
        let idBlnc = dataBalance.data.values.flat().map(Number)
      
        if(idStatus[numberIndex]==='–ß–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'&& Number(msg.text)){
            
            if(idBlnc[numberIndex] >= Number(msg.text)*0.5){
            const updateBalance = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`B${numberIndex+1}`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Math.floor(idBlnc[numberIndex]-Number(msg.text)*0.5)]]}
            }
            //--
              const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            gsapi.spreadsheets.values.update(sendTextss)
            //--
            gsapi.spreadsheets.values.update(updateNumber)
            gsapi.spreadsheets.values.update(updatePodpsDef)
            gsapi.spreadsheets.values.update(updateBalance)
            bot.sendMessage(chatId,`‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã`)
            bot.sendMessage('@newstlgr', `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ë–´–°–¢–†–´–ï: ${msg.text}`)
          } else if(idBlnc[numberIndex] < Number(msg.text)*0.5){
            bot.sendMessage(chatId,`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ`)
          }
        }
        
        if(idStatus[numberIndex]==='–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–µ'&& (msg.text.includes('https')||msg.text.includes('t.me')||msg.text.includes('http')||msg.text.includes('@'))){
            const allBalance = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'B1:B'
            }
            let dataBalance = await gsapi.spreadsheets.values.get(allBalance)
            let idBlnc = dataBalance.data.values.flat().map(Number)

            const appendOptions = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'I1',
                valueInputOption:'USER_ENTERED',
                includeValuesInResponse: true,
                resource: {values: [
                    ['–ü–æ–¥–ø–∏—Å—á–∏–∫–∏',msg.chat.id,msg.text, '-',0,normalTime],
                ]}
            }
             //--
             const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            gsapi.spreadsheets.values.update(sendTextss)
            //--
            bot.sendMessage('@newstlgr', `–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ —Å—é–¥–∞ –ú–ï–î–õ–ï–ù–ù–û ${msg.text}`)
           
            gsapi.spreadsheets.values.append(appendOptions)
            gsapi.spreadsheets.values.update(updatePodpsmed)

            bot.sendMessage(chatId,`üë• –í–≤–µ–¥–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n\n –ë–∞–ª–∞–Ω—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∫—Ä—É—Ç–∏—Ç—å <b>${Math.floor(idBlnc[numberIndex]/0.05)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>`,{parse_mode: 'HTML' })
            
        }
        if(idStatus[numberIndex]==='–ß–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –º–µ–¥–ª–µ–Ω–Ω–æ'&& Number(msg.text)){
            
            if(idBlnc[numberIndex] >= Number(msg.text)*0.05){
            const updateBalance = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`B${numberIndex+1}`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Math.floor(idBlnc[numberIndex]-Number(msg.text)*0.05)]]}
            }
             //--
             const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            gsapi.spreadsheets.values.update(sendTextss)
            //--
            gsapi.spreadsheets.values.update(updateNumber)
            gsapi.spreadsheets.values.update(updatePodpsDef)
            gsapi.spreadsheets.values.update(updateBalance)
            bot.sendMessage(chatId,`‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã`)
            bot.sendMessage('@newstlgr', `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ú–ï–î–õ–ï–ù–ù–û: ${msg.text}`)
          } else if(idBlnc[numberIndex] < Number(msg.text)*0.05){
            bot.sendMessage(chatId,`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ`)
          }
        }
    
        if(idStatus[numberIndex]==='–ê–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã'&& (msg.text.includes('https')||msg.text.includes('t.me')||msg.text.includes('http')||msg.text.includes('@'))){
            
            const appendOptions = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'P1',
                valueInputOption:'USER_ENTERED',
                includeValuesInResponse: true,
                resource: {values: [
                    [msg.chat.id,(msg.text.includes('@')?`http://t.me/${msg.text}`:msg.text.includes('http')?`${msg.text}`:msg.text.includes('https')?`${msg.text}`:msg.text.includes('t.me')?`${msg.text}`:`${msg.text}`)],
                ]}
            }
            
              //--
              const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            gsapi.spreadsheets.values.update(sendTextss)
            //--

            bot.sendMessage('@newstlgr', `üëÅ‚Äçüó® –ê–í–¢–û–ü–†–û–°–ú–û–¢–†–´ üëÅ‚Äçüó® ${msg.text}`)
            gsapi.spreadsheets.values.append(appendOptions)
            gsapi.spreadsheets.values.update(updateCountAvto)

            bot.sendMessage(chatId,`üëÅ‚Äçüó® –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –æ–¥–∏–Ω –ø–æ—Å—Ç:`,{parse_mode: 'HTML' })
        }
       
    
        if(idStatus[numberIndex]==='–ß–∏—Å–ª–æ –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'&& Number(msg.text)){
            const allBalance = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'B1:B'
            }
            let dataBalance = await gsapi.spreadsheets.values.get(allBalance)
            let idBlnc = dataBalance.data.values.flat().map(Number)
         
            gsapi.spreadsheets.values.update(updateNumberAvto)
            gsapi.spreadsheets.values.update(updateNakrAvto)
            bot.sendMessage(chatId,`‚è≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:\n\n –ë–∞–ª–∞–Ω—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ <b>${Math.floor(idBlnc[numberIndex]/20)} –¥–Ω–µ–π</b>`,{
               parse_mode: 'HTML'
            })
              //--
              const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            gsapi.spreadsheets.values.update(sendTextss)
            //--
            bot.sendMessage('@newstlgr', `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç: ${msg.text}`)
        }
 
        if(idStatus[numberIndex]==='–î–Ω–µ–π –Ω–∞–∫—Ä—É—Ç–∫–∏'&& Number(msg.text)){
            const allTarifs = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'E1:E'
            }
            let dataTarifs = await gsapi.spreadsheets.values.get(allTarifs)
            let idTarifs = dataTarifs.data.values
           
            if(idBlnc[numberIndex] >= Number(msg.text)*20 && idTarifs[numberIndex][0]!='–ù–µ—Ç—É'){
            const updateBalance = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`B${numberIndex+1}`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[idBlnc[numberIndex]-Number(msg.text)*20]]}
            }
              //--
              const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            gsapi.spreadsheets.values.update(sendTextss)
            //--
            gsapi.spreadsheets.values.update(updateNumberDayAvto)
            gsapi.spreadsheets.values.update(updateStatusAvto)
            gsapi.spreadsheets.values.update(updateBalance)
            bot.sendMessage(chatId,`‚úÖ –ê–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã`)
            bot.sendMessage('@newstlgr', `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: ${msg.text}`)
          } else if(idBlnc[numberIndex] < Number(msg.text)*20){
            bot.sendMessage(chatId,`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ`)
          }else if(idTarifs[numberIndex][0]=== '–ù–µ—Ç—É'){
            bot.sendMessage(chatId,`üí≥ –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ <b>–Ω—É–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω. </b>`,{parse_mode:'HTML'})
          }
        }
        if(idStatus[numberIndex]==='–ü—Ä–æ–¥–ª–µ–≤–∞–Ω–∏–µ'&& Number(msg.text)){
             
            if(idBlnc[numberIndex] >= Number(msg.text)*20){
                const updateBalance = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:`B${numberIndex+1}`,
                    valueInputOption:'USER_ENTERED',
                    resource: {values: [[idBlnc[numberIndex]-Number(msg.text)*20]]}
                }
             //--
             const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            gsapi.spreadsheets.values.update(sendTextss)
            //--
            gsapi.spreadsheets.values.update(updateBalance)
            gsapi.spreadsheets.values.update(updateStatusAvto)
            bot.sendMessage('@newstlgr', `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: ${msg.text}`)
            bot.sendMessage(chatId,`‚úÖ –ê–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø—Ä–æ–¥–ª–µ–Ω—ã `)
        }else if(idBlnc[numberIndex] < Number(msg.text)*20){
            bot.sendMessage(chatId,`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ`)
          }
        }

        if(idStatus[numberIndex]==='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'&& Number(msg.text)){
               //--
               const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            gsapi.spreadsheets.values.update(sendTextss)
            //--
            gsapi.spreadsheets.values.update(updateStatusAvto)
            bot.sendMessage('@newstlgr', `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${msg.text}`)
            bot.sendMessage(chatId,`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ `)
        }
        
        if(idStatus[numberIndex]==='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Qiwi'&& Number(msg.text)){
          
            if(idBlnc[numberIndex] >= Number(msg.text)*100){
                const updateBalance = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:`B${numberIndex+1}`,
                    valueInputOption:'USER_ENTERED',
                    resource: {values: [[idBlnc[numberIndex]-Number(msg.text)*100]]}
                }
            gsapi.spreadsheets.values.update(updateBalance)
            gsapi.spreadsheets.values.update(updateGlavnya)
                  //--
                  const saveIds = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:'V1:V'
                }
                let dataIds = await gsapi.spreadsheets.values.get(saveIds)
                let idTarifs = Number(dataIds.data.values[0].flat())
                const sendTextss = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:`V1`,
                    valueInputOption:'USER_ENTERED',
                    resource: {values: [[Number(idTarifs)+1]]}
                }
                gsapi.spreadsheets.values.update(sendTextss)
                //--
            bot.sendMessage('@newstlgr', `ü•ùQIWIü•ù\n${chatId} \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ QIWI: ${msg.text}`,{parse_mode:'HTML'})
            bot.sendMessage(chatId,`‚è≥<b>–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è</b>‚è≥\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 –º–∏–Ω—É—Ç.\n<b>Qiwi –∫–æ—à–µ–ª–µ–∫</b> –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n<i>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Zheka920 </i>`,{parse_mode:'HTML'})
        }else if(idBlnc[numberIndex] < Number(msg.text)*100){
            bot.sendMessage(chatId,`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ`)
          }
        }
        
        if(idStatus[numberIndex]==='–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞'&& Number(msg.text)){
          
            const sendText = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`U1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(msg.text)]]}
            }
            gsapi.spreadsheets.values.update(sendText)
            gsapi.spreadsheets.values.update(sendTexts)
            bot.sendMessage(chatId,`Id –∑–∞–ø–∏—Å–∞–Ω`)
        }
        if(idStatus[numberIndex]==='–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç'&& msg.text){
            const saveId = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'U1:U'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveId)
            let idTarifs = Number(dataIds.data.values[0].flat())
            bot.sendMessage(idTarifs,`${msg.text}`)
            bot.sendMessage(chatId,`‚úâÔ∏è–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ‚úâÔ∏è`)
            gsapi.spreadsheets.values.update(updateGlavnya)
        }
   

   }
  

    switch (msg.text){
        
case '–ö–∏–≤–∏ –∑–∞–∫–∞–∑':
    client.authorize(function(err,tokens){
        if(err){
            console.log(err)
            return
        } else {
        
            qiwas(client)
        
        }
    })
    async function qiwas(cl){
        const gsapi = google.sheets({version:'v4',auth: cl})

        const all = {
        spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
        range:'A1:A'
        }
        let data = await gsapi.spreadsheets.values.get(all)
        let allID = data.data.values.flat().map(Number)
        numberIndex = allID.indexOf(chatId)
        const updateStp = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞']]}
        }
        gsapi.spreadsheets.values.update(updateStp)
    }
break
case '–ê–¥–º–∏–Ω –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏':
    client.authorize(function(err,tokens){
        if(err){
            console.log(err)
            return
        } else {
        
            admin(client)
        
        }
    })
    async function admin(cl){
        const gsapi = google.sheets({version:'v4',auth: cl})

        const all = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'A2:A'
        }
        let data = await gsapi.spreadsheets.values.get(all)
        let allID = data.data.values.flat().map(Number)
  
    
        allID.forEach(e =>  bot.sendMessage(e,`‚ùóÔ∏è <b>–£–≤–µ–ª–∏—á–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</b>‚ùóÔ∏è\n\n –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ 10 000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –æ–¥–∏–Ω –ø–æ—Å—Ç\n\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Ç—É—Ç @glazaVtelege \n\n–ù–∞—á–∏–Ω–∞–π—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—åüí™ `,{parse_mode: 'HTML'}))
       
    }
    break

case kb.home.podpschik:     
    bot.sendMessage(chatId,`<b>üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ üëá</b>`,{
        reply_markup:{ resize_keyboard: true,keyboard:keyboard.podpisota},parse_mode: 'HTML'
    })
break
case kb.blockhome.podpschik: 
    bot.sendMessage(chatId,`<b>üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ üëá</b>`,{
        reply_markup:{ resize_keyboard: true,keyboard:keyboard.podpisota},parse_mode: 'HTML'
    })      
break
case kb.podpischik.qweek:
            client.authorize(function(err,tokens){
                if(err){
                    console.log(err)
                    return
                } else {
                
                    podpschik(client)
                }
            })
            async function podpschik(cl){
                const gsapi = google.sheets({version:'v4',auth: cl})

                const all = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'A1:A'
            }
            let data = await gsapi.spreadsheets.values.get(all)
            let allID = data.data.values.flat().map(Number)
            numberIndex = allID.indexOf(chatId)
            const updateStp = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`G${numberIndex+1}`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [['–ü–æ–¥–ø–∏—Å—á–∏–∫–∏']]}
            }
            gsapi.spreadsheets.values.update(updateStp)

        }
        bot.sendMessage(chatId,`<b>üèÉ‚Äç‚ôÇÔ∏è –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ üèÉ‚Äç‚ôÇÔ∏è</b>\n\nüîπ –¶–µ–Ω–∞: 0.5 ‚ÇΩ / 1 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞\nüîπ –ú–æ–∂–Ω–æ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–Ω–∞–ª—ã, —á–∞—Ç—ã –∏ –±–æ—Ç—ã\nüîπ –ë–µ–∑ –æ—Ç–ø–∏—Å–æ–∫\nüîπ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç\n\nüëá –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª, —á–∞—Ç:`,{
            reply_markup:{ resize_keyboard: true,keyboard:keyboard.back},parse_mode: 'HTML'
        })
break
case kb.podpischik.slow:
        client.authorize(function(err,tokens){
            if(err){
                console.log(err)
                return
            } else {
            
                podpschikslow(client)
            }
        })
        async function podpschikslow(cl){
            const gsapi = google.sheets({version:'v4',auth: cl})

            const all = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'A1:A'
        }
        let data = await gsapi.spreadsheets.values.get(all)
        let allID = data.data.values.flat().map(Number)
        numberIndex = allID.indexOf(chatId)
        const updateStp = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–µ']]}
        }
        gsapi.spreadsheets.values.update(updateStp)

        }
        bot.sendMessage(chatId,`<b>üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ üêå</b>\n\nüîπ –¶–µ–Ω–∞: 0.05 ‚ÇΩ / 1 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞\nüîπ –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞–Ω–∞–ª—ã\nüîπ –í–æ–∑–º–æ–∂–Ω—ã –æ—Ç–ø–∏—Å–∫–∏\nüîπ –°—Ç–∞—Ä—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞\n\nüëá –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –û–¢–ö–†–´–¢–´–ô –∫–∞–Ω–∞–ª:`,{
        reply_markup:{ resize_keyboard: true,keyboard:keyboard.back},parse_mode: 'HTML'
        })
break
case kb.home.glaza: 
        client.authorize(function(err,tokens){
            if(err){
                console.log(err)
                return
            } else {
            
                statusNakrutka(client)
            }
        })
        async function statusNakrutka(cl){
            const gsapi = google.sheets({version:'v4',auth: cl})

            const all = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'A1:A'
            }
            let data = await gsapi.spreadsheets.values.get(all)
            let allID = data.data.values.flat().map(Number)

            const allStatusTarif = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'D1:D'
            }
            let dataStatusTarif  = await gsapi.spreadsheets.values.get(allStatusTarif)
            let allStatus = dataStatusTarif.data.values.flat()

            numberIndex = allID.indexOf(chatId)
  
            if(allStatus[numberIndex] ==='yes'){
                const updateNakrz = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:`G${numberIndex+1}`,
                    valueInputOption:'USER_ENTERED',
                    resource: {values: [['–ù–∞–∫—Ä—É—Ç–∫–∞']]}
                }
                gsapi.spreadsheets.values.update(updateNakrz)
                bot.sendMessage(chatId, `–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å`,{
                    reply_markup:{ resize_keyboard: true,keyboard:keyboard.back}
                })
            }
            
        }
        break 
case kb.home.avto: 
        client.authorize(function(err,tokens){
            if(err){
                console.log(err)
                return
            } else {
            
                statusAvto(client)
            }
        })
        async function statusAvto(cl){
            const gsapi = google.sheets({version:'v4',auth: cl})

            const all = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'P2:S'
            }
            let data = await gsapi.spreadsheets.values.get(all)
            let  allID = data.data.values
         
            numberIndex = allID.indexOf(chatId)

            const allavto = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'A1:A'
            }
            let dataallavto = await gsapi.spreadsheets.values.get(allavto)
            let allIDallavto = dataallavto.data.values.flat().map(Number)
            numberIndexavto = allIDallavto.indexOf(chatId)
            const updateStatusAvto = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`G${numberIndexavto+1}`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [['–ê–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã']]}
            }
            
          

            bot.sendMessage(chatId, `<b>‚ÑπÔ∏è –ê–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç–Ω–∞—è –æ–ø—Ü–∏—è</b>,–∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. \n\n‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç <b>—Ç–æ–ª—å–∫–æ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∞—Ä–∏—Ñ–Ω—ã–º –ø–ª–∞–Ω–æ–º</b> –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ 20 ‚ÇΩ/–¥–µ–Ω—å –∑–∞ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª (–∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–¥–ª–∏—Ç—å¬ª)\n\n ‚ÑπÔ∏è –ù–∞ –∫–∞–Ω–∞–ª–∞—Ö —Å –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏ –Ω–∞–∫—Ä—É—Ç–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ <b>—Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏,</b> –Ω–∞ —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã –¥–µ–ª–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é —Ä–µ–ø–æ—Å—Ç–æ–º\n\n ‚ÑπÔ∏è –í—ã –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –Ω–æ —Ü–∏—Ñ—Ä—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö –±—É–¥—É—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏.\n\n ‚ÑπÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫—É–ø–ª–µ–Ω–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–∞–º–∏.\n\n‚ùáÔ∏è <b>–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å</b> –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –∑–∞—Ç–µ–º –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–∂–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞ —Å–∫–æ–ª—å–∫–æ –±—É–¥—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ø—Ä–æ—Å–º–æ—Ç—Ä—ã`,{
                reply_markup:{ resize_keyboard: true,keyboard:keyboard.back},parse_mode:'HTML'
            }).then(function(){ if(allID !== undefined){
                let  key = ['id','channel','count','time']
                let objKeruvannya = allID.map(row =>
                    row.reduce((acc, cur, i) =>
                      (acc[key[i]] = cur, acc), {}))
                 
                objKeruvannya.map(e => {
                    if(Number(e.id) === chatId){
                        bot.sendMessage(chatId,` üí¨ <a href='${e.channel}'>${e.channel}</a> ‚Ä¢ üëÅ‚Äçüó® ${e.count} ‚Ä¢ –¥–æ ${e.time}`,{
                            reply_markup:{ resize_keyboard: true,  inline_keyboard:  [
                                [
                                    {
                                        text:'üìÜ –ü—Ä–æ–¥–ª–∏—Ç—å',
                                        callback_data:`prodlit`
                                    }
                                ],
                                [    {
                                        text:'‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å',
                                        callback_data:`change`
                                    },
                                    {
                                        text:'‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å',
                                        callback_data:`cancel`
                                    }
                                ]
                                ]},
                            parse_mode:'HTML'
                        })
                        }
                    })    
                  
                }}).then( bot.sendMessage(chatId, `üëâ –ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∫ –Ω–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:`,{
                reply_markup:{ resize_keyboard: true,keyboard:keyboard.back},parse_mode:'HTML'
            }))

            
          
            gsapi.spreadsheets.values.update(updateStatusAvto)
        }
        break 
case kb.home.keryvannya: 
        client.authorize(function(err,tokens){
            if(err){
                console.log(err)
                return
            } else {
            
                keryvannya(client)
            
            }
        })
        async function keryvannya(cl){
             
            const gsapi = google.sheets({version:'v4',auth: cl})
    
            const all = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'I2:N'
            }
            let data = await gsapi.spreadsheets.values.get(all)
            let  allID = data.data.values   
            numberIndex = allID.indexOf(chatId) 
           if(allID !== undefined){
            let  key = ['name','id','idChannel','post', 'count','time']
            let objKeruvannya = allID.map(row =>
                row.reduce((acc, cur, i) =>
                  (acc[key[i]] = cur, acc), {}))
               
            objKeruvannya.map(e => {
                if(Number(e.id) === chatId){
                    bot.sendMessage(chatId,`<b>–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω</b> ${e.time}\n${(e.name==='–ü–æ–¥–ø–∏—Å—á–∏–∫–∏')?`<a href='${e.idChannel}'>${e.name}</a>`:`<a href='https://t.me/c/${e.idChannel}/${e.post}'>${e.name}</a>`}\n<b>–ó–∞–∫–∞–∑–∞–Ω–æ:</b> ${e.count} ${(e.name==='–ü–æ–¥–ø–∏—Å—á–∏–∫–∏')?'–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤':'–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'}`,{
                        reply_markup:{ resize_keyboard: true,  inline_keyboard:  [
                            [    {
                                    text:'‚ùå –£–¥–∞–ª–∏—Ç—å',
                                    callback_data:`delete`                            }
                            ]
                            ]},
                        parse_mode:'HTML'
                    })
                    }
                })    
              
            }
           
        }
        bot.sendMessage(chatId, `
            –ü–æ—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∫—Ä—É—á–∏–≤–∞—é—Ç—Å—è: 
        `,{
            reply_markup:{ resize_keyboard: true,keyboard:keyboard.back}
        })

        break 

case kb.home.qiwiKosh: 
        
             
            bot.sendMessage(chatId, `
        <b>–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å ü•ù Qiwi –∫–æ—à–µ–ª–µ–∫.</b>\n\nQIWI (RU) —Å—Ç–∞—Ç—É—Å <b>–û–°–ù–û–í–ù–û–ô</b>. —Å QVC+–ú–ò–†\n–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: 100.00 —Ä—É–±–ª–µ–π –∑–∞ —à—Ç.\n–í –Ω–∞–ª–∏—á–∏–∏: 25—à—Ç.\n\nü•ù Qiwi –∫–æ—à–µ–ª–µ–∫ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç —Å QIWI VISA CARD.\n–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É.\n–ú–æ–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏.\n<b>–°–º—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –û–¢–ö–õ–Æ–ß–ï–ù–´.</b>\n\n–ê–∫–∫–∞—É–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞!\n–ü–∞—Ä–æ–ª—å –Ω–∞ –Ω–∏—Ö —Å–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è.\n\n–õ–∏–º–∏—Ç –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ 60 000—Ä.\n–õ–∏–º–∏—Ç –ø–ª–∞—Ç–µ–∂–µ–π –≤ –º–µ—Å—è—Ü 200 000—Ä.\n\nü•ù Qiwi –∫–æ—à–µ–ª—å–∫–∏ –ø—Ä–æ–¥–∞—é—Ç—Å—è <b>—Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–∏ —Ä—É–∫–∏.</b>\n\nüîù <b>–ì–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ 100%</b>.\n
        `,{
            reply_markup:{ resize_keyboard: true,keyboard:keyboard.qiwiKosh},
            parse_mode:'HTML'
        })
break 
case kb.home.qiwibuy: 
        client.authorize(function(err,tokens){
            if(err){
                console.log(err)
                return
            } else {
            
                qiwibuy(client)
            
            }
        })
        async function qiwibuy(cl){
             
            const gsapi = google.sheets({version:'v4',auth: cl})
        
            const all = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'A1:A'
            }
            let data = await gsapi.spreadsheets.values.get(all)
            let allID = data.data.values.flat().map(Number)
            numberIndex = allID.indexOf(chatId)
            const allBalance = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'B1:B'
            }
            let dataBalance = await gsapi.spreadsheets.values.get(allBalance)
            let idBlnc = dataBalance.data.values.flat().map(Number)
            const updateQiwi = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`G${numberIndex+1}`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Qiwi']]}
            }
               
            gsapi.spreadsheets.values.update(updateQiwi)
            
            bot.sendMessage(chatId, `–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ <b>${Math.floor(idBlnc[numberIndex]/100)} —à—Ç.</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:`,{
            reply_markup:{ resize_keyboard: true,keyboard:keyboard.back},
            parse_mode:'HTML'
            })
        }
    
break 
case kb.home.profile:
             client.authorize(function(err,tokens){
                if(err){
                    console.log(err)
                    return
                } else {
                  
                    saveproba(client)
                
                }
            })
            async function saveproba(cl){
             
                

                const gsapi = google.sheets({version:'v4',auth: cl})
        
                const all = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:'A1:A'
                }
                let data = await gsapi.spreadsheets.values.get(all)
                let allID = data.data.values.flat().map(Number)
                numberIndex = allID.indexOf(chatId)
                const allBalance = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:'B1:B'
                }
                let dataBalance = await gsapi.spreadsheets.values.get(allBalance)
                let idBlnc = dataBalance.data.values.flat().map(Number)

                const allTarif = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:'E1:E'
                }
                let dataTarif = await gsapi.spreadsheets.values.get(allTarif)
                let idTrf = dataTarif.data.values.flat()
                
             
     
        
          
            bot.sendMessage(chatId, `
                üë§ –í–∞—à ID: ${chatId}\nüí∞ –ë–∞–ª–∞–Ω—Å: ${idBlnc[numberIndex]}—Ä.\nüéØ –¢–∞—Ä–∏—Ñ: ${idTrf[numberIndex]}\n \n 
            `,{
                reply_markup:{ 
                    resize_keyboard: true,
                   keyboard:keyboard.profile
                }
            })    }
break
case kb.profile.balance:
 
  
  
    client.authorize(function(err,tokens){
        if(err){
            console.log(err)
            return
        } else {
        
            popoln(client)
        
        }
    })

    async function popoln(cl){
          
        await bot.sendMessage(chatId,`–í–≤–µ–¥–∏—Ç–µ —Å—É–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—Ä—É–±.):`,{
            reply_markup:{ 
                resize_keyboard: true,
            keyboard:keyboard.back,
            }
         }) 

        const gsapi = google.sheets({version:'v4',auth: cl})

        const all = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'A1:A'
        }
        let data = await gsapi.spreadsheets.values.get(all)
        let allID = data.data.values.flat().map(Number)

        numberIndex = allID.indexOf(chatId)
       
        const updateBalancessss = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–û–ø–ª–∞—Ç–∞']]}
        }
       
        
    
        gsapi.spreadsheets.values.update(updateBalancessss)
    }

break
 
case kb.home.instruction:
           
            bot.sendMessage(chatId, `<b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç</b>‚ùì\n‚ñ∂Ô∏è –ë–æ—Ç –Ω–∞–∫—Ä—É—á–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–µ/–æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞–Ω–∞–ª—ã.\n\n<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>‚ùì\n‚ñ∂Ô∏è –î–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>"üëÄ –ù–∞–∫—Ä—É—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"</b> --> –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –±–æ—Ç–∞ –ø–æ—Å—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã --> –≤–≤–µ—Å—Ç–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n\n<b>–ö–∞–∫ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä—ã</b>‚ùì\n‚ñ∂Ô∏è –í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è –∫ –æ–±—â–µ–º—É —á–∏—Å–ª—É (–ø—Ä–∏–º–µ—Ä: –Ω–∞ –ø–æ—Å—Ç–µ 2000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –≤—ã —Ö–æ—Ç–∏—Ç–µ 5000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤,—Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 3000)\n\n<b>–ö–∞–∫ –∫—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ</b>‚ùì\n‚ñ∂Ô∏è –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç–∞ –æ–¥–Ω–∏–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤, –≤ —Ä–∞–∑–¥–µ–ª–µ <b>"üë§ –ü—Ä–æ—Ñ–∏–ª—å"</b>, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É <b>"üëÅÔ∏è –¢–∞—Ä–∏—Ñ—ã"</b> –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏ –æ–ø–ª–∞—Ç–∏—Ç—å.\n\n<b>–Ø –æ–ø–ª–∞—Ç–∏–ª, –∞ –¥–µ–Ω—å–≥–∏ –Ω–µ –ø—Ä–∏—à–ª–∏. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?</b>‚ùì\n‚ñ∂Ô∏è –í —ç—Ç–æ–º —Å–ª—É—á–∞–∏ –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @Zheka920\n\n‚ùóÔ∏è <b>–ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –±–æ—Ç–∞</b> ‚ùóÔ∏è\n‚ñ∂Ô∏è –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @glazaVtelege —Ç–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É `,{
                reply_markup:{ resize_keyboard: true,keyboard:keyboard.back},parse_mode:'HTML'
            })
     
break
case kb.blockhome.proba:   

            bot.sendMessage(chatId, `–í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 15 –º–∏–Ω—É—Ç?`,{
                reply_markup:{ resize_keyboard: true,  inline_keyboard:  [
                    [    {
                            text:'‚úÖ –î–∞',
                            callback_data:'yes'
                        }
                    ],
                    [
                        { 
                            text:'‚ùå –ù–µ—Ç',
                            callback_data:'no'
                        }
             
                    ]],}
            })
            break
case kb.blockhome.kupit: 
         
            bot.sendMessage(chatId, `
            <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\nüìà –î–µ–Ω—å: 100 —Ä—É–±\nüìâ 3 –¥–Ω—è: 250 —Ä—É–±\nüìà –ù–µ–¥–µ–ª—è: 500 —Ä—É–±\nüìâ –ú–µ—Å—è—Ü: 1500 —Ä—É–± \n\n\nüìÜ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã
            `,{
                reply_markup:{ resize_keyboard: true,keyboard:keyboard.tarif},
                parse_mode:'HTML'
            })
break
case kb.profile.tarif:
            bot.sendMessage(chatId, `
            <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\nüìà –î–µ–Ω—å: 100 —Ä—É–±\nüìâ 3 –¥–Ω—è: 250 —Ä—É–±\nüìà –ù–µ–¥–µ–ª—è: 500 —Ä—É–±\nüìâ –ú–µ—Å—è—Ü: 1500 —Ä—É–± \n\n\nüìÜ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã
                `,{
                    reply_markup:{ resize_keyboard: true,keyboard:keyboard.tarif},
                    parse_mode:'HTML'
            })
break
  
case kb.home.tarif: 
    
        bot.sendMessage(chatId, `
        <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\nüìà –î–µ–Ω—å: 100 —Ä—É–±\nüìâ 3 –¥–Ω—è: 250 —Ä—É–±\nüìà –ù–µ–¥–µ–ª—è: 500 —Ä—É–±\nüìâ –ú–µ—Å—è—Ü: 1500 —Ä—É–± \n\n\nüìÜ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã
        `,{
            reply_markup:{ resize_keyboard: true,keyboard:keyboard.tarif},
            parse_mode:'HTML'
       
        })
    
        break 
//--------------------------
case kb.tarif.day: 
        client.authorize(function(err,tokens){
            if(err){
                console.log(err)
                return
            } else {
            
                day(client)
            
            }
        })
        async function day(cl){
            
            const gsapi = google.sheets({version:'v4',auth: cl})

            const all = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'A1:A'
            }
            let data = await gsapi.spreadsheets.values.get(all)
            let allID = data.data.values.flat().map(Number)

            const allBalance = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'B1:B'
            }
            let dataBalance = await gsapi.spreadsheets.values.get(allBalance)
            let idBlnc = dataBalance.data.values.flat().map(Number)
            
            numberIndex = allID.indexOf(chatId)
            summ = 100
            time = 97200
         bot.sendMessage(chatId, `
        üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ 1 –¥–µ–Ω—å 100—Ä.\n\nüí∞ –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ ${idBlnc[numberIndex]} —Ä—É–±.\n\n –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–ø–ª–∞—Ç—É‚ùì
        `,{
            reply_markup:{ resize_keyboard: true,keyboard:keyboard.yesornot},
            
        })
        
    }
     
break
        

case kb.tarif.three: 
        client.authorize(function(err,tokens){
            if(err){
                console.log(err)
                return
            } else {
            
                three(client)
            
            }
        })
        async function three(cl){
            
            const gsapi = google.sheets({version:'v4',auth: cl})

            const all = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'A1:A'
            }
            let data = await gsapi.spreadsheets.values.get(all)
            let allID = data.data.values.flat().map(Number)

            const allBalance = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'B1:B'
            }
            let dataBalance = await gsapi.spreadsheets.values.get(allBalance)
            let idBlnc = dataBalance.data.values.flat().map(Number)
            summ = 250
            time = 270000
            numberIndex = allID.indexOf(chatId)
        bot.sendMessage(chatId, `
        üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ 3 –¥–Ω—è 250—Ä.\n\nüí∞ –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ ${idBlnc[numberIndex]} —Ä—É–±.\n\n –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–ø–ª–∞—Ç—É‚ùì
        `,{
        reply_markup:{ resize_keyboard: true,keyboard:keyboard.yesornot},
        
        })}
break
case kb.tarif.week: 
        client.authorize(function(err,tokens){
            if(err){
                console.log(err)
                return
            } else {
            
                week(client)
            
            }
        })
        async function week(cl){
            
            const gsapi = google.sheets({version:'v4',auth: cl})

            const all = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'A1:A'
            }
            let data = await gsapi.spreadsheets.values.get(all)
            let allID = data.data.values.flat().map(Number)

            const allBalance = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'B1:B'
            }
            let dataBalance = await gsapi.spreadsheets.values.get(allBalance)
            let idBlnc = dataBalance.data.values.flat().map(Number)
            summ = 500
            time = 615600
            numberIndex = allID.indexOf(chatId)
    
        bot.sendMessage(chatId, `
        üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é 500—Ä.\n\nüí∞ –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ ${idBlnc[numberIndex]} —Ä—É–±.\n\n –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–ø–ª–∞—Ç—É‚ùì
        `,{
        reply_markup:{ resize_keyboard: true,keyboard:keyboard.yesornot},

        })}
break
case kb.tarif.month: 
    client.authorize(function(err,tokens){
        if(err){
            console.log(err)
            return
        } else {
        
            month(client)
        
        }
    })
    async function month(cl){
        
        const gsapi = google.sheets({version:'v4',auth: cl})

        const all = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'A1:A'
        }
        let data = await gsapi.spreadsheets.values.get(all)
        let allID = data.data.values.flat().map(Number)

        const allBalance = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'B1:B'
        }
        let dataBalance = await gsapi.spreadsheets.values.get(allBalance)
        let idBlnc = dataBalance.data.values.flat().map(Number)
        
        numberIndex = allID.indexOf(chatId)
        summ = 1500 
        time = 86760*30 
        bot.sendMessage(chatId, `
        üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ –º–µ—Å—è—Ü—å 1500—Ä.\n\nüí∞ –ù–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ ${idBlnc[numberIndex]} —Ä—É–±.\n\n –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–ø–ª–∞—Ç—É‚ùì
        `,{
        reply_markup:{ resize_keyboard: true,keyboard:keyboard.yesornot},

        })}
break

case kb.yesornot.yes:
    client.authorize(function(err,tokens){
        if(err){
            console.log(err)
            return
        } else {
        
            yes(client)
        
        }
    })
    async function yes(cl){
        
        const gsapi = google.sheets({version:'v4',auth: cl})

        const all = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'A1:A'
        }
        let data = await gsapi.spreadsheets.values.get(all)
        let allID = data.data.values.flat().map(Number)

        const allBalance = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'B1:B'
        }
        let dataBalance = await gsapi.spreadsheets.values.get(allBalance)
        let idBlnc = dataBalance.data.values.flat().map(Number)
        numberIndex = allID.indexOf(chatId)

        const updateBalance = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`B${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [[idBlnc[numberIndex]-summ]]}
        }
        
        const nowupdateOptions = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`D${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['yes']]}
        }
        const nowupdateOptionsNo = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`D${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['no']]}
        }
        const nowallProba = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'D1:D'
        }
        let nowdataproba = await gsapi.spreadsheets.values.get(nowallProba)
        let nowprobaID = nowdataproba.data.values.flat()
        let tarifTime = new Date().getTime()+time*1000
        let tarifDay = `${new Date(tarifTime).getDate()}`+'.'+`${new Date(tarifTime).getMonth()+1}`+'.'+`${new Date(tarifTime).getFullYear()}`+` `+`${new Date(tarifTime). getHours()}`+`:`+`${new Date(tarifTime).getMinutes()}`+`:`+`${new Date(tarifTime).getSeconds()}`
    
        const updateTarif = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`E${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [[`–¥–æ ` +tarifDay]]}
        }
        const updateTarifNo = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`E${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–ù–µ—Ç—É']]}
        }

        if(idBlnc[numberIndex] >= summ && summ === 1500 && nowprobaID[numberIndex]==='no'){
                gsapi.spreadsheets.values.update(updateTarif)
                gsapi.spreadsheets.values.update(updateBalance)
                bot.sendMessage(chatId, `‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞! 
                `,{reply_markup:{ resize_keyboard: true,keyboard:keyboard.home},})
                gsapi.spreadsheets.values.update(nowupdateOptions)

                function setDaysTimeout(callback,days) {
                   
                    let msInDay = 86400*1000; 
                
                    let dayCount = 0;
                    let timer = setInterval(function() {
                        dayCount++;  
                
                        if (dayCount === days) {
                           clearInterval(timer);
                           callback.apply(this, []);
                        }
                    }, msInDay);
                }
           
                setDaysTimeout(function() {
                    bot.sendMessage(chatId, `‚òπÔ∏è –í—Ä–µ–º—è —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏—Å—Ç–µ–∫–ª–æ. \n \n –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª! `,{
                        reply_markup:{ resize_keyboard: true,keyboard:keyboard.blockhome}
                    }) 
                    gsapi.spreadsheets.values.update(nowupdateOptionsNo)
                    gsapi.spreadsheets.values.update(updateTarifNo)
                    
                }, 30); 
                
            }
      
        
       if(idBlnc[numberIndex] >= summ && nowprobaID[numberIndex]==='no' && summ !==1500 ){
            
            gsapi.spreadsheets.values.update(updateTarif)
            gsapi.spreadsheets.values.update(updateBalance)
            bot.sendMessage(chatId, `‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞! ‚úÖ
             `,{reply_markup:{ resize_keyboard: true,keyboard:keyboard.home},})
             gsapi.spreadsheets.values.update(nowupdateOptions)
            setTimeout(function() {bot.sendMessage(chatId, `‚òπÔ∏è –í—Ä–µ–º—è —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏—Å—Ç–µ–∫–ª–æ. \n \n –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª! `,{
                reply_markup:{ resize_keyboard: true,keyboard:keyboard.blockhome}
            }) 
            gsapi.spreadsheets.values.update(nowupdateOptionsNo)
            gsapi.spreadsheets.values.update(updateTarifNo)
              }, time*1000)
              
        }else if( nowprobaID[numberIndex]==='yes'){
            bot.sendMessage(chatId, `‚úîÔ∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω 
             `,{
            reply_markup:{ resize_keyboard: true,keyboard:keyboard.yesornot},
            })
        } else if(idBlnc[numberIndex] < summ){
            bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É! 
             `,{
            reply_markup:{ resize_keyboard: true,keyboard:keyboard.yesornot},
    
            })}
        

    }

    
break

//-------------------------
case kb.back:
 
    client.authorize(function(err,tokens){
        if(err){
           
            console.log(err)
      
            return
        } else {
          
            saveBack(client)
        }
    })
    async function saveBack(cl){
      
    

        const gsapi = google.sheets({version:'v4',auth: cl})
        const all = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'A1:A'
        }
        let data = await gsapi.spreadsheets.values.get(all)
        let allID = data.data.values.flat().map(Number)
        numberIndex = allID.indexOf(chatId)
        const allProba = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'D1:D'
        }
        let dataproba = await gsapi.spreadsheets.values.get(allProba)
        let probaID = dataproba.data.values.flat()

        const updateGlavnya = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:`G${numberIndex+1}`,
            valueInputOption:'USER_ENTERED',
            resource: {values: [['–ì–ª–∞–≤–Ω–∞—è']]}
        }
      
        if(probaID[numberIndex]==='yes'){
             gsapi.spreadsheets.values.update(updateGlavnya)
             bot.sendMessage(chatId, `üëâ –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n\n‚ùóÔ∏è –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @glazaVtelege ‚ùóÔ∏è`,{
                reply_markup:{ resize_keyboard: true,keyboard:keyboard.home}
            })
        }
            else{
                  gsapi.spreadsheets.values.update(updateGlavnya)
                  bot.sendMessage(chatId, `üëâ –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n\n‚ùóÔ∏è –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @glazaVtelege ‚ùóÔ∏è`,{
                    reply_markup:{ resize_keyboard: true,keyboard:keyboard.blockhome}
                })
               
            }
            }
            
        break    

    }
})

bot.on('callback_query',  query => {
   
    switch (query.data){
        case 'yes':
            client.authorize(function(err,tokens){
                if(err){
                    console.log(err)
                    return
                } else {
                    
                    saveproba(client)
                }
            })
            async function saveproba(cl){
                
                const gsapi = google.sheets({version:'v4',auth: cl})
            
               
                const all = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:'A1:A'
                }
                let data = await gsapi.spreadsheets.values.get(all)
                let allID = data.data.values.flat().map(Number)
                numberIndex = allID.indexOf(query.message.chat.id)
                
             //----------------------
                const updateOptions = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:`C${numberIndex+1}`,
                    valueInputOption:'USER_ENTERED',
                    resource: {values: [['yes']]}
                }
                const allProba = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:'C1:C'
                }
                let dataproba = await gsapi.spreadsheets.values.get(allProba)
                let probaID = dataproba.data.values.flat()
             //----------------------
             const nowupdateOptions = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`D${numberIndex+1}`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [['yes']]}
            }
            const nowupdateOptionsNo = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`D${numberIndex+1}`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [['no']]}
            }
            const nowallProba = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'D1:D'
            }
            let nowdataproba = await gsapi.spreadsheets.values.get(nowallProba)
            let nowprobaID = nowdataproba.data.values.flat()
             
               
              if(probaID[numberIndex]==='no'){
                bot.sendMessage(query.message.chat.id, `‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ`,{
                    reply_markup:{ resize_keyboard: true,keyboard:keyboard.home}
                })  
                gsapi.spreadsheets.values.update(nowupdateOptions)
                setTimeout(function() {bot.sendMessage(query.message.chat.id, `–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n \n –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª! `,{
                    reply_markup:{ resize_keyboard: true,keyboard:keyboard.blockhome}
                }) 
                gsapi.spreadsheets.values.update(updateOptions)
                gsapi.spreadsheets.values.update(nowupdateOptionsNo)
                  }, 900*1000)
                  } else{
                    bot.sendMessage(query.message.chat.id, `‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥`,{
                        reply_markup:{ resize_keyboard: true,keyboard:keyboard.blockhome}
                    })  
                }
            }
            
 
        break
        case 'no':
            bot.sendMessage(query.message.chat.id, `–ü—Ä–∏–≤–µ—Ç ${query.from.first_name}, —è –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`,{
                reply_markup:{ resize_keyboard: true,keyboard:keyboard.blockhome}
            })  
        break
        case 'cancel':
            client.authorize(function(err,tokens){
                if(err){
                    console.log(err)
                    return
                } else {
                  
                    cancels(client)
                }
            })
            async function cancels(cl){
                const gsapi = google.sheets({version:'v4',auth: cl})
                
                let —Åhannelss = query.message.entities[0].url
                const all = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:'A1:A'
                }
                let data = await gsapi.spreadsheets.values.get(all)
                let allID = data.data.values.flat().map(Number)
                numberIndex = allID.indexOf(query.message.chat.id)
           
                const updateNakrAvto = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:`G${numberIndex+1}`,
                    valueInputOption:'USER_ENTERED',
                    resource: {values: [['–ê–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã']]}
                }
                gsapi.spreadsheets.values.update(updateNakrAvto)
      
              
            bot.sendMessage(query.message.chat.id, `‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω ‚úÖ`,{
                parse_mode: 'HTML'
            })  
             //--
             const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            gsapi.spreadsheets.values.update(sendTextss)
            //--
            bot.sendMessage('@newstlgr', `‚ùåüëÅ‚Äçüó® –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª —Å –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${—Åhannelss}üëÅ‚Äçüó®‚ùå`)
        }
        break
        case 'change':
            client.authorize(function(err,tokens){
                if(err){
                    console.log(err)
                    return
                } else {
                  
                    changes(client)
                }
            })
            async function changes(cl){
                const gsapi = google.sheets({version:'v4',auth: cl})
                
                let —Åhannelss = query.message.entities[0].url
                const all = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:'A1:A'
                }
                let data = await gsapi.spreadsheets.values.get(all)
                let allID = data.data.values.flat().map(Number)
                numberIndex = allID.indexOf(query.message.chat.id)
           
                const updateNakrAvto = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:`G${numberIndex+1}`,
                    valueInputOption:'USER_ENTERED',
                    resource: {values: [['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤']]}
                }
                gsapi.spreadsheets.values.update(updateNakrAvto)
                 //--
             const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            gsapi.spreadsheets.values.update(sendTextss)
            //--
              
            bot.sendMessage(query.message.chat.id, `üëÅ‚Äçüó® –í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –æ–¥–∏–Ω –ø–æ—Å—Ç:`,{
                parse_mode: 'HTML'
            })  
            bot.sendMessage('@newstlgr', `‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${—Åhannelss}‚úèÔ∏è`)
        }
        break
        case 'prodlit':
        
            client.authorize(function(err,tokens){
                if(err){
                    console.log(err)
                    return
                } else {
                  
                    prodlits(client)
                }
            })
            async function prodlits(cl){
                const gsapi = google.sheets({version:'v4',auth: cl})
                
                let —Åhannelss = query.message.entities[0].url
                const all = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:'A1:A'
                }
                let data = await gsapi.spreadsheets.values.get(all)
                let allID = data.data.values.flat().map(Number)
                numberIndex = allID.indexOf(query.message.chat.id)
           
                const updateNakrAvto = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:`G${numberIndex+1}`,
                    valueInputOption:'USER_ENTERED',
                    resource: {values: [['–ü—Ä–æ–¥–ª–µ–≤–∞–Ω–∏–µ']]}
                }
                gsapi.spreadsheets.values.update(updateNakrAvto)
      
                const allBalance = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:'B1:B'
                }
                let dataBalance = await gsapi.spreadsheets.values.get(allBalance)
                let idBlnc = dataBalance.data.values.flat().map(Number)
             
                 //--
             const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            gsapi.spreadsheets.values.update(sendTextss)
            //--
            bot.sendMessage(query.message.chat.id, `‚ÑπÔ∏è –°—É—Ç–∫–∏ –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ = 20 ‚ÇΩ.\n\nüåÄ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–¥–ª–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ <b>${Math.floor(idBlnc[numberIndex]/20)} –¥–Ω–µ–π</b>\n\nüëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:`,{
                parse_mode: 'HTML'
            })  
            bot.sendMessage('@newstlgr', `‚è≥–ü—Ä–æ–¥–ª–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${—Åhannelss}‚è≥`)
        }
     
        break
        case 'delete':
            let posts = query.message.entities[1].url.substring(26)
            let idChannels = query.message.entities[1].url.substring(15,25)
            let masivNakrutka = `${idChannels},${posts}`
            let channelsPodp = query.message.entities[1].url
         
            client.authorize(function(err,tokens){
                if(err){
                    console.log(err)
                    return
                } else {
                  
                    deletes(client)
                }
            })
            async function deletes(cl){
                const gsapi = google.sheets({version:'v4',auth: cl})
                
                const all = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:'K2:L'
                }
                let data = await gsapi.spreadsheets.values.get(all)
                let allID = data.data.values
              
                let newmasiv = []
                allID.map(e=>{
                    newmasiv.push(e.join())
                })
                numberIndex = newmasiv.indexOf(masivNakrutka)
              
                const clearRange = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:`I${numberIndex+2}:N${numberIndex+2}`
                }
               
                await gsapi.spreadsheets.values.clear(clearRange)

                const alls = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:'I2:N'
                }
                let datas = await gsapi.spreadsheets.values.get(alls)
                let allIDs = datas.data.values

                await gsapi.spreadsheets.values.get(alls)
                let newAlls = []
                allIDs.map(e=>{
                    if(e.length>0){
                        newAlls.push(e)
                    }
                })

                const updatealls = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:`I2:N`,
                    valueInputOption:'USER_ENTERED',
                    resource: {values: newAlls}
                }
                const clearRange2 = {
                    spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                    range:`I2:N`
                }
                await gsapi.spreadsheets.values.clear(clearRange2)
                await gsapi.spreadsheets.values.update(updatealls)
                 //--
             const saveIds = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:'V1:V'
            }
            let dataIds = await gsapi.spreadsheets.values.get(saveIds)
            let idTarifs = Number(dataIds.data.values[0].flat())
            const sendTextss = {
                spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
                range:`V1`,
                valueInputOption:'USER_ENTERED',
                resource: {values: [[Number(idTarifs)+1]]}
            }
            gsapi.spreadsheets.values.update(sendTextss)
            //--
                bot.sendMessage(query.message.chat.id,'‚úîÔ∏è –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω —Å –Ω–∞–∫—Ä—É—Ç–∫–∏')
                bot.sendMessage('@newstlgr',`‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ ${channelsPodp} ‚ùå`)

            }
            
          
         
        break
    }
 
  
})

bot.onText(/\/start/, msg => {
    const text = `–ü—Ä–∏–≤–µ—Ç ${msg.from.first_name}, —è –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`

    bot.sendMessage(helper.getChatId(msg), text, {
        reply_markup:{
            resize_keyboard: true,
            keyboard:keyboard.blockhome
        },
 
    })
    client.authorize(function(err,tokens){
        if(err){
            console.log(err)
            return
        } else {
         
            saveID(client)
        }
    })
    async function saveID(cl){
    
        const gsapi = google.sheets({version:'v4',auth: cl})
    
        const appendOptions = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'A1',
            valueInputOption:'USER_ENTERED',
            insertDataOption:'INSERT_ROWS',
            includeValuesInResponse: true,
            resource: {values: [
                [msg.chat.id,0,'no','no','–ù–µ—Ç—É',0,'–ì–ª–∞–≤–Ω–∞—è'],
            ]}
        }
        const all = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'A1:A'
        }
        let data = await gsapi.spreadsheets.values.get(all)
        let allID = data.data.values.flat().map(Number)

        const allBalance = {
            spreadsheetId:'1Hblq_0kcMgtXKiJVxPkWybZoC15f9sRoO6Fyypuu_dg',
            range:'B1:B'
        }
        let dataBalance = await gsapi.spreadsheets.values.get(allBalance)
        let idBlnc = dataBalance.data.values.flat().map(Number)
        
        if(allID.includes(msg.chat.id)){
            numberIndex = allID.indexOf(msg.chat.id)
            balanceId = idBlnc[numberIndex]
        } else{
            await gsapi.spreadsheets.values.append(appendOptions)
        }
        
       
        
    }
  
});


